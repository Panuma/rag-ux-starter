# -*- coding: utf-8 -*-
"""
build_images_index.py
–°–∫–∞–Ω–∏—Ä—É–µ—Ç 03_assets, —Å—Ç—Ä–æ–∏—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ CLIP –∏ –∫–ª–∞–¥—ë—Ç –∏—Ö –≤ Chroma (–∫–æ–ª–ª–µ–∫—Ü–∏—è 'ux_images').

‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω (sentence-transformers), –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–µ—Å CLIP.
‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: path (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π), filename (–∏–º—è —Ñ–∞–π–ª–∞), rel (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞).
"""

import os
from pathlib import Path
from typing import List

from PIL import Image
import chromadb
from sentence_transformers import SentenceTransformer

# --------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ---------
BASE_DIR = Path(__file__).resolve().parent
ASSETS_DIR = (BASE_DIR / "03_assets").resolve()
DB_DIR = (BASE_DIR / "storage" / "chroma").resolve()

COLLECTION_NAME = "ux_images"
ALLOW_SUFFIXES = {".png", ".jpg", ".jpeg", ".webp"}

# --------- –£—Ç–∏–ª–∏—Ç—ã ---------
def iter_images(root: Path) -> List[Path]:
    for p in root.rglob("*"):
        if p.is_file() and p.suffix.lower() in ALLOW_SUFFIXES:
            yield p

def build_rel_path(p: Path) -> str:
    try:
        return str(p.relative_to(BASE_DIR)).replace("\\", "/")
    except Exception:
        return str(p).replace("\\", "/")

def main():
    if not ASSETS_DIR.exists():
        raise SystemExit(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –∞—Å—Å–µ—Ç–∞–º–∏: {ASSETS_DIR}")

    print(f"[1/4] –°–∫–∞–Ω–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤: {ASSETS_DIR}")
    files = list(iter_images(ASSETS_DIR))
    if not files:
        raise SystemExit("–í 03_assets –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (*.png/jpg/jpeg/webp). –î–æ–±–∞–≤—å —Ñ–∞–π–ª—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏.")

    print(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

    print("[2/4] –ò–Ω–∏—Ü–∏–∏—Ä—É—é Chroma‚Ä¶")
    client = chromadb.PersistentClient(path=str(DB_DIR))
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é (–æ—á–∏—Å—Ç–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã)
    try:
        coll = client.get_collection(COLLECTION_NAME)
    except Exception:
        coll = client.create_collection(COLLECTION_NAME)

    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    try:
        coll.delete(where={})
        print("  –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—Å—Ç–∏–ª–∞—Å—å (upsert –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É).")
    except Exception:
        print("  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é ‚Äî –ø—Ä–æ–¥–æ–ª–∂—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö.")

    print("[3/4] –ó–∞–≥—Ä—É–∂–∞—é CLIP-–º–æ–¥–µ–ª—å (sentence-transformers: clip-ViT-B-32)‚Ä¶")
    model = SentenceTransformer("clip-ViT-B-32")  # –æ—Ñ–ª–∞–π–Ω, –µ—Å–ª–∏ –≤–µ—Å–∞ —É–∂–µ –Ω–∞ –¥–∏—Å–∫–µ

    # –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ—Ä–µ–∂—ë–º –ø–∞–º—è—Ç—å)
    BATCH = 32
    added = 0
    ids, embs, metas, docs = [], [], [], []

    def flush_batch():
        nonlocal ids, embs, metas, docs, added
        if not ids:
            return
        coll.add(ids=ids, embeddings=embs, metadatas=metas, documents=docs)
        added += len(ids)
        print(f"  + {len(ids)} (–≤—Å–µ–≥–æ: {added})")
        ids, embs, metas, docs = [], [], [], []

    print("[4/4] –ö–æ–¥–∏—Ä—É—é –∏ –¥–æ–±–∞–≤–ª—è—é –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é‚Ä¶")
    for idx, p in enumerate(files, start=1):
        try:
            img = Image.open(p).convert("RGB")
        except Exception as e:
            print(f"  ! –ü—Ä–æ–ø—É—Å–∫ (–Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è): {p} ({e})")
            continue

        # —ç–º–±–µ–¥–¥–∏–Ω–≥
        emb = model.encode([img], convert_to_numpy=True, normalize_embeddings=True)[0]

        # –∞–π–¥–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        fid = f"img::{p.stem}::{idx}"  # —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
        abs_path = str(p.resolve())
        rel_path = build_rel_path(p)

        ids.append(fid)
        embs.append(emb.tolist())
        metas.append({
            "path": abs_path,            # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–ª—è st.image
            "filename": p.name,          # –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            "rel": rel_path,             # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        })
        docs.append(rel_path)  # –¥–æ–∫—É–º–µ–Ω—Ç = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

        if len(ids) >= BATCH:
            flush_batch()

    flush_batch()

    print("\n–ì–æ—Ç–æ–≤–æ ‚úÖ")
    print(f"–ò–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω: –∫–æ–ª–ª–µ–∫—Ü–∏—è '{COLLECTION_NAME}', —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {DB_DIR}")
    print("–¢–µ–ø–µ—Ä—å –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´üñº –ü–æ –º–∞–∫–µ—Ç—É¬ª –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ.")

if __name__ == "__main__":
    main()
